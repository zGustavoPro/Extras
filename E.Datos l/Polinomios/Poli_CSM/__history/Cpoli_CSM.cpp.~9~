//---------------------------------------------------------------------------

#pragma hdrstop

#include "Cpoli_CSM.h"
//---------------------------------------------------------------------------
Pol_CSM :: Pol_CSM ()
{
	nt=0;    ptr_poli=-1;
}
//---------------------------------------------------------------------------
void Pol_CSM :: crear_CSM ()
{
m.~CSMemoria();
}
//---------------------------------------------------------------------------
 bool Pol_CSM :: Escero()
 {
	 return nt==0;
 }
 //---------------------------------------------------------------------------
 int Pol_CSM :: new_espacio(AnsiString aux){
 int x= m.new_espacio(aux);
 return x;
 }
  //---------------------------------------------------------------------------
  void Pol_CSM :: delete_espacio(Direccion i){
  m.Delete_espacio(i);
  }
   //---------------------------------------------------------------------------
 Direccion Pol_CSM :: Buscar_Exponente(int expo){
   Direccion Dir = ptr_poli;
if (Dir != -1) {
	 Direccion dir_ex=-1;
	 while ((Dir != -1) && (dir_ex==-1))
	 {
		 if (m.Obtener_Dato(Dir,"->exp")==expo)  {
		 dir_ex=Dir;                            }
		 Dir=m.Obtener_Dato(Dir,"->sgt");
	 }
	 return dir_ex;
}else return -1;
 }
 //---------------------------------------------------------------------------
 Direccion Pol_CSM :: Buscar_Termino (int i)
 {

Direccion Dir = ptr_poli;
if (Dir != -1) {
Direccion dir_ter = -1 ;
Direccion Nt=0;
while(Dir != -1 && dir_ter==-1 )
{
 Nt=Nt+1;
 if (Nt==i) {
	  dir_ter=Dir; }
		   Dir=m.Obtener_Dato(Dir,"->sgt");
}
return dir_ter;
} else return -1;
 }
 //---------------------------------------------------------------------------
 int Pol_CSM :: Grado ()
 {
 Direccion Dir =ptr_poli;

 if (Dir != -1) {
	 int MaxG = m.Obtener_Dato(Dir,"->exp");
	 while(Dir != -1)
	 {
	   if (m.Obtener_Dato(Dir,"->exp")>MaxG) {
		   MaxG=m.Obtener_Dato(Dir,"->exp");
	   }
	 }
	 return MaxG;
 } else return -1;
 }
  //---------------------------------------------------------------------------
  int Pol_CSM :: Coeficiente(int expo){
   Direccion Dir=Buscar_Exponente(expo);
	 if (Dir != -1)
		  return m.Obtener_Dato(Dir,"->coef") ;
   else return -1;
  }
  //---------------------------------------------------------------------------
  void Pol_CSM :: Asignar_Coeficiente(int coe,int expo){
	 Direccion Dir = Buscar_Exponente(expo);
		if (Dir != -1) {
		m.Poner_dato(Dir,"->coef",coe);
		if (coe==0){
		m.Delete_espacio(Dir);
		}
   } throw "No Existe ese Termino";
  }
   //---------------------------------------------------------------------------
   void Pol_CSM :: Poner_Termino (int coe,int expo) {

			 Direccion Existe = Buscar_Exponente(expo);  // devuelve Direccion

	 if (Existe == -1) {// -1 No Existe
	Direccion aux = m.new_espacio("coef,exp,sgt");
	 if (aux != -1)
	 {
	 m.Poner_dato(aux,"->coef",coe);
	 m.Poner_dato(aux,"->exp",expo);
	 m.Poner_dato(aux,"->sgt",ptr_poli);
	 ptr_poli=aux;
	 nt++;
	 } else throw "Error Memoria LLena";
	 }else {
	 int Nuevo_Coef= m.Obtener_Dato(Existe,"->coef")+coe;
	 m.Poner_dato(Existe,"->coef",Nuevo_Coef);
	 if (Nuevo_Coef==0)
	 {
	 m.Delete_espacio(Existe);
	 }
			}
   }
   //---------------------------------------------------------------------------
  int Pol_CSM :: Numero_Terminos(){
  return nt;
  }
   //---------------------------------------------------------------------------
 int Pol_CSM :: Exponente(int nroter){
 Direccion Dir = Buscar_Termino(nroter);
  if (Dir != -1)
	  return m.Obtener_Dato(Dir,"->exp");
  else  return  -1;
 }
 //---------------------------------------------------------------------------
 void Pol_CSM :: MostrarCSM(int x1,int y1,TCanvas *Canvas){
 m.Mostrar(x1,y1,Canvas);
 }
 //---------------------------------------------------------------------------
 void Pol_CSM :: MostrarPol (int x1,int y1,TCanvas *Canvas){
 AnsiString auxp="  ";
   AnsiString auxl="   ";
   for(int i=1; i<=nt;i++){
   int Dir= Buscar_Termino(i);
   int coe=m.Obtener_Dato(Dir,"->coef");
   int expo=m.Obtener_Dato(Dir,"->exp");
   auxp=auxp+IntToStr(coe)+"X^"+IntToStr(expo)+" + ";
   auxl=auxl+IntToStr(coe)+","+IntToStr(expo)+"  , ";
   }
   auxp=auxp.Delete(auxp.Length()-2,2);
	  auxl=auxp.Delete(auxl.Length()-2,2);
	  auxp=" P(x) = "+auxp;
	  auxl="< "+auxl+" >";
	  Canvas->Font->Size=14;
	Canvas->TextOut(x1,y1+420,auxp);
   //Canvas->TextOut(x1+350,y1+90,auxl);
 }

  //---------------------------------------------------------------------------
  void Pol_CSM :: Derivar(){
	  { int i=1;
 while (i<=nt) {
	Direccion Dir=Buscar_Termino(i);
	int coef=m.Obtener_Dato(Dir,"->coef");
	int exp=m.Obtener_Dato(Dir,"->exp");
	coef = coef*exp;
	exp=exp-1;
	m.Poner_dato(Dir,"->coef",coef);
	m.Poner_dato(Dir,"->exp",exp);
	i++;
	if (exp==-1) {
				m.Delete_espacio(Dir);
	}
  }
  } }
  //---------------------------------------------------------------------------
  double Pol_CSM :: Evaluar(double x){
  if (Escero()) {
  return 0;
  } else { double y=0;
	for (int i=1; i <=nt; i++) { 
	  Direccion Dir = Buscar_Termino(i);
	  int coef=m.Obtener_Dato(Dir,"->coef");
	  int exp=m.Obtener_Dato(Dir,"->exp");
	  y = y + Potencia(x,exp)*coef;
	
  } return y;
  }
  }
  //---------------------------------------------------------------------------
  double Pol_CSM :: Potencia(double base,int expo){
  if (expo==0) {
	  return 1;
  }
  double n=base;
  for (int i=1; i < expo; i++) {
   n *= base;
  }
  return n;
  }
 //---------------------------------------------------------------------------
 void Pol_CSM :: CordenadasXY(int a,int b,TCanvas *Canvas){

 int x1=1150;
 int y1=120;
 
 int ox=1148;       //punto de origen
 int oy=246;
 
 
 Canvas->Brush->Color=clBtnFace;
 TRect area(x1-200,20,x1+200,y1+300);
 Canvas->FillRect(area);
   Canvas->Font->Color=clRed;
   
	 if (nt !=0) {
 for (double i=a; i<b; i+=0.01) {
   int p=Evaluar(i);
   if (p>0 && oy-p>0) {
	   Canvas->TextOut(ox+i,oy-p,".");
   }else 
   Canvas->TextOut(ox+i,oy+p,".");
   }
}

   
 Canvas->Font->Color=clBlack;
  Canvas->MoveTo(x1,y1-100);       // Y
  Canvas->LineTo(x1,y1+300);

  Canvas->MoveTo(x1-200,270);       // X
  Canvas->LineTo(x1+200,270);
 }
 //---------------------------------------------------------------------------
 void Pol_CSM :: Poner_Dato(int dir,AnsiString id,int dato){
 m.Poner_dato(dir,id,dato);
 }



#pragma package(smart_init)
