//---------------------------------------------------------------------------

#pragma hdrstop
 #include <stdlib.h>
 #include <time.h>
#include "CC_Vector.h"
//---------------------------------------------------------------------------
	CC_Vector :: CC_Vector() {
	   cant=0;
	   for (int i=1; i <= max; i++) {
		   x[i]=0;
	   }
	}
//---------------------------------------------------------------------------
	bool CC_Vector :: Vacio(){
	   return cant==0;
	}
//---------------------------------------------------------------------------
	bool CC_Vector :: Pertenece(int e){
		for (int i=1; i <=cant; i++) {
			   if (x[i]==e) {
						  return true;
			   }
		}
		return false;
	}
//---------------------------------------------------------------------------
	void CC_Vector :: Inserta(int e){
		  if (!Pertenece(e)) {
		   cant++;
		   x[cant]=e;
		  }
	}
//---------------------------------------------------------------------------
	int CC_Vector :: cardinal(){
		  return cant;
	}
//---------------------------------------------------------------------------
	int CC_Vector :: Ordinal(int e){
		int resp=0;
		for (int i=1; i <=max; i++) {
							 if (x[i] !=0) {
										 resp++;
										 if (x[i]==e) {
											 return resp;
										 }
							 }
		}
		return resp;
	}
 //---------------------------------------------------------------------------
	void CC_Vector :: Suprime(int e){
	   for (int i=1; i <=cant; i++) {
		   if (x[i]==e) {
					  for (int j=i; j<=cant; j++) {
						  x[j]=x[j+1];
					  }
					  cant--;
					  return;
		   }
	   }
	}
  //---------------------------------------------------------------------------
	int CC_Vector :: Muestrea(){
		srand(time(0));
		return rand()%cant+1;
	}
 //---------------------------------------------------------------------------
	Direccion CC_Vector :: anterior(Direccion){

	}
 //---------------------------------------------------------------------------
	Direccion CC_Vector :: localiza(int){

	}
 //---------------------------------------------------------------------------
	int CC_Vector :: obt_elem(int){

	}
 //---------------------------------------------------------------------------
	int CC_Vector :: numero_Aleatorio(){

	}
//---------------------------------------------------------------------------
	void CC_Vector :: reiniciar(){

	}
 //---------------------------------------------------------------------------
  bool CC_Vector :: Equvalencia(CC_Vector*,CC_Vector*){

	}
 //---------------------------------------------------------------------------
  void CC_Vector :: Interseccion (CC_Vector*,CC_Vector*){

	}
 //---------------------------------------------------------------------------
  void CC_Vector :: Union(CC_Vector*,CC_Vector*){

	}
 //---------------------------------------------------------------------------
  void CC_Vector :: Mostrar_Conjuntos(AnsiString,int,int,TCanvas *Canvas){

	}
 //---------------------------------------------------------------------------
  void CC_Vector :: Mostrar_Memoria(int,int,TCanvas *Canvas){

	}
 //---------------------------------------------------------------------------
#pragma package(smart_init)
