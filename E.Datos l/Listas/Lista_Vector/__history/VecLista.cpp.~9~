//---------------------------------------------------------------------------

#pragma hdrstop

#include "VecLista.h"
#include <vcl.h>
//---------------------------------------------------------------------------
#pragma package(smart_init)
	VecLista::VecLista()
{
	longitud=0;
}

direccion VecLista::Fin()
{
	return longitud;
}

 direccion VecLista::Primero()
 {    if (Vacio())
	  {
		  ShowMessage("Lista Vacía");
		  return 0;
	  }
	  else
	  {
	  return 1;
	  }
 }

 direccion VecLista::Siguiente(direccion p )
 {
   if (Vacio())
	  {
		  ShowMessage("Lista Vacía");
		  return 0;
	  }
	  else
	  {
		if (p==Fin())
		{
		 ShowMessage("dirección no válida");
		  return 0;
		}
		else
		{
		return p+1;
		}
	  }
 }

 direccion  VecLista::Anterior( direccion p)
 {
	  if (Vacio())
	  {
		  ShowMessage("Lista Vacía");
		  return 0;
	  }
	  else
	  {
		if (p==Primero())
		{
		 ShowMessage("dirección no válida");
		  return 0;
		}
		else
		{
		return p-1;
		}
	  }
 }

  bool VecLista:: Vacio()
  {
	  return (longitud==0);
  }

int VecLista::Recupera(direccion p)
   {
	 if (Vacio())
	  {
		  ShowMessage("Lista Vacía");
		  return 0;
	  }
	  else
	  {
		  return lista[p];
	  }
   }

int VecLista::Longitud ()
	{
		return longitud;
	}

void VecLista::Inserta( direccion p, int dato)
		{
		 if (Vacio())
		  {
		  ShowMessage("Lista Vacía");
		  }
		  else
		  {
			if (p<1 or p>longitud)
			{
			  ShowMessage("dirección no válida");
			}
			else
			 {
				direccion n=longitud;
			  while (n!=p)
			   {
				lista[n+1]=lista[n];
				n--;
			   }
			   lista[n]=dato;
			   longitud++;
			 }
		  }
		}

void  VecLista::Inserta_Primero( int dato)
{
	if (longitud==Max)
	{
		ShowMessage("Lista Llena");
	}
	else
	{

	   for (int i=longitud; i > 1; i--) {
		lista[i+1]=lista[i];
	   }

	   lista[1]=dato;
	   longitud++;
	}
}
void VecLista::Inserta_Ultimo(int dato)
{
 if (longitud==Max)
	{
		ShowMessage("Lista Llena");
	}
	else
	{
		longitud++;
		lista[longitud]=dato;
	}
}
void VecLista::Suprime(direccion p)
{
	if (Vacio())
	{
		  ShowMessage("Lista Vacía");
	}
	else
	{
	 if (p<1 or p>longitud)
	 {
		 ShowMessage("dirección no válida");
	 }
	 else
	 {
	   for (int i=p;i<longitud; i++)
	   {
		 lista[i]=lista[i+1];
	   }
	   longitud--;
	 }
	}
}
void VecLista::Modifica( direccion p, int dato)
{
  if (Vacio())
	{
		  ShowMessage("Lista Vacía");
	}
	else
	{
	 if (p<1 or p>longitud)
	 {
		 ShowMessage("dirección no válida");
	 }
	 else
	 {
		 lista[p]=dato;
	 }
	}
}

	void  VecLista :: anula() {
	   if (!Vacio()) {
	 for(int i=0; i<=Longitud(); i++){
	 lista[i]=0;
	 }
	 longitud=0;
	   }
	}

void VecLista:: Dibuja(int x1, int y1, TCanvas* Canvas)
{
 int x=30;
  Canvas->Brush->Color=clAqua;
 Canvas->Rectangle(0,0,1600,1080);
 //TRect area(x1,y1,x1+1000,y1+50);
 //Canvas->FillRect(area);

AnsiString aux=" ";
	Canvas->Font->Size = 17;
		Canvas->Font->Color = clBlack;
  for (int i=1; i <=longitud; i++) {
	 aux=aux+StrToInt(lista[i])+" ,";
  }
   aux=aux.Delete(aux.Length(),1);
	aux = "<" +aux + " >";
	 Canvas->TextOut(x1,y1,aux);
}

