//---------------------------------------------------------------------------

#pragma hdrstop
#include "Lista.h"
//---------------------------------------------------------------------------

#pragma package(smart_init)
CSMemoria m;
 void  Lista::Crear()
 {
	 longitud=0;
	 ptrElementos=-1;
 }
 void Lista::CrearMemoria(){
 m.Crear();
 }
 bool Lista::Vacio()
 {
	 return ( longitud == 0);
 }
 int Lista::Longitud()
 {
     return longitud;
 }
 direccion  Lista::Fin()
 {
 direccion ptrFin=-1;
	 if (Vacio())
	 {   	ShowMessage("Lista vacía");
	 }
	 else
	 {
	 direccion x = ptrElementos;

		 while (x != -1)
		 {
			 ptrFin=x;
			 x = m.Obtener_Dato(x,"->sig");
		 }

	 }
	 return ptrFin;
 }
 direccion Lista::Primero()
 {
	 return ptrElementos;
 }
  direccion Lista::Siguiente(direccion p)
  {  if (Vacio())
	 {
		 ShowMessage("Lista Vacía");
	  return -1;
	 }
	 else
	 {   if (p==Fin()) {
			 ShowMessage("Error de Dirección");
			 return -1;
		 }
		 else
		 {
		 return m.Obtener_Dato(p,"->sig");
		 }
	 }
  }
	direccion Lista::Anterior(direccion p)
	{
	 if (Vacio())
	 {
	 ShowMessage("Lista Vacía");
	  return -1;
	 }
	 else
	 {
		 if (p==ptrElementos)
		 {
           ShowMessage("Error de Dirección");
			 return -1;
		 }
		 else
		 {
		   direccion x=ptrElementos;
		   direccion ant=-1;
		   while (x!=-1)
			   {
				 if (x==p)
				 {
					 return ant;
				 }
				 ant=x;
				 x=m.Obtener_Dato(x,"->sig");

			   }
         }
     }
	}
 void Lista::Inserta(direccion p , int dato)
 {
	 direccion x=m.new_espacio("elemento,sig");
	 if (x!=-1)
		 {
				 m.Poner_dato(x,"->elemento",dato);m.Poner_dato(x,"->sig",-1);
				 if (Vacio()) {
					 ptrElementos=x;
					 longitud=1;
				 }
				 else
				 {
					 longitud++;
					 if (p==Primero())
					 {
					   m.Poner_dato(x,"->sig",p);
					 }
					 else
					 {
					  direccion ant= Anterior(p);
					  m.Poner_dato(ant,"->sig",x);
					  m.Poner_dato(x,"->sig",p);
                     }
                 }
		 }
		 else
		 {
             ShowMessage("No hay Suficiente Espacio de Memoria");
         }
 }
 void Lista::Inserta_primero(int dato)
 {
 direccion x=m.new_espacio("elemento,sig");
   if (x!=-1)
   {
	  m.Poner_dato(x,"->elemento",dato);
	  m.Poner_dato(x,"->sig",ptrElementos);
	  longitud++;
	  ptrElementos=x;
   }
 }
 void Lista::Inserta_ultimo(int dato)
 {
   direccion x=m.new_espacio("elemento,sig");
	 if (x!=-1)
	 {
	   m.Poner_dato(x,"->elemento",dato);
	   m.Poner_dato(x,"->sig",-1);
	   if (longitud==0)
	   {
		  ptrElementos=x;
	   }
	   else
	   {
		   m.Poner_dato(Fin(),"->sig",x);
	   }
       longitud++;
	 }
 }
 void Lista::Mostrar(int x,int y,TCanvas *Canvas)
 {
     m.Mostrar(x,y,Canvas);
 }
 void Lista::Suprime(direccion p)
 {
  if (Vacio())
  {
	 ShowMessage("Lista vacía");
  }
  else
  {
	if (p==ptrElementos)
	{
		direccion x=ptrElementos;
		ptrElementos=m.Obtener_Dato(x,"->sig");
		m.Delete_espacio(p);
	}
	else
	{
	 direccion ant=Anterior(p);
	 m.Poner_dato(ant,"->sig",Siguiente(p));
	 m.Delete_espacio(p);
	}
	longitud--;
  }
 }
 void Lista::Modifica(direccion p,int dato)
 {
	 if (Vacio())
	 {
	   ShowMessage("Lista vacía");
	 }
	 else
	 {
	   m.Poner_dato(p,"->elemento",dato);
	 }
 }

  int Lista::new_espacio(AnsiString variable){
	int x = m.new_espacio(variable);
	return x;
  }

  void Lista::Delete_espacio(int direccion){
	 m.Delete_espacio(direccion);
	 }
	 void Lista :: Mostrar_Lista(int x1, int y1,TCanvas *Canvas)
	 {
		AnsiString  aux ="";
		direccion x=Primero();
	for (int i=1;i<=longitud;i++) {
		  aux=IntToStr(m.Obtener_Dato(x,"->elemento"))+",";
		  x=Siguiente(x);
		}
		aux= " < " + aux + ">";
		Canvas->TextOut(x1,y1,aux) ;
	 }
