//---------------------------------------------------------------------------

#pragma hdrstop

#include "CNotaciones.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

Notaciones :: Notaciones(Pila_CSMemoria* pil){
pila=pil;
}

Notaciones :: Notaciones(){
pila=new Pila_CSMemoria();
}
//---------------------------------------------------------------------------

double Notaciones :: evaluar_PosFija(string expPosFija){
string signo="+-/*^";
string cad="0123456789";
  for (int i=0 ; i <expPosFija.Length();i++) {
		if (cad.Pos(expPosFija[i])) {
		   pila->meter(StrToInt(expPosFija[i]));
		} else{
		int op1;
		int op2;
			pila->sacar(op1);
			pila->sacar(op2);
			if(signo.Pos(expPosFija[i])){
			  int z=evaluar(op1,expPosFija[i],op2);
			  pila->meter(z);
			}

		}
  }
  int p;
  pila->sacar(p);
  return p;
}
//---------------------------------------------------------------------------
double Notaciones :: evaluar(int x1,char signo,int x2){
switch (signo) {
  case '^' :
	return pow(x1,x2);

  case '+' :
	return x1+x2;

  case '-' :
	return x1-x2;

  case '*' :
	return  x1*x2;

  case '/' :
   if(x2!=0)
	 return  x1/x2;
	  else throw "error";

	default:
	  break;
}
  throw"Error" ;
}
*/
//---------------------------------------------------------------------------
bool Notaciones :: esOperador(char c) {
	string op = "+-%*/^";
	int pos = op.find_first_of(c);
	return pos >= 0;
}
//---------------------------------------------------------------------------
int Notaciones :: prioridad(char operador) {
	switch (operador) {
	case '^':
		return 5;
	case '*':
	case '/':
		return 4;
	case '%':
		return 3;
	case '+':
	case '-':
		return 2;
	case '(':
	case ')':
		return 1;
	}
	return 0;
}
//---------------------------------------------------------------------------
string Notaciones :: postfija(string exp) {
	string res = "";
	for (int i = 0; i < exp.length(); i++) {
		char c = exp[i];
		if (c == '(')
			pila->meter(c);
		else if (c == ')') {
			int s;
			while (pila->cima() != '(') {
				pila->sacar(s);
				res += s;
			}
			pila->sacar(s);
		}
		else if (!esOperador(c)) // si es letra
				res += c;
		else {
			while (!pila->vacia() && prioridad(c) < prioridad(pila->cima())) {
				int s;
				pila->sacar(s);
				res += s;
			}
			pila->meter(c);
		}
	}
	while (!pila->vacia()) {
		int s;
		pila->sacar(s);
		res += s;
	}
	return res;
}
//---------------------------------------------------------------------------
string Notaciones :: invertido(string s) {
	string r = "";
	for (int i = 0; i < s.length(); i++)
		r = s[i] + r;
	return r;
}
//---------------------------------------------------------------------------
string Notaciones :: prefija(string exp) {
	string res = "";
	for (int i = exp.length() - 1; i >= 0; i--) {
		char c = exp[i];
		if (c == ')')
			pila->meter(c);
		else if (c == '(') {
			int s;
			while (pila->cima() != ')') {
				pila->sacar(s);
				res += s;
			}
			pila->sacar(s);
		}
		else if (!esOperador(c))
				res += c;
		else {
			while (!pila->vacia() && prioridad(c) < prioridad(pila->cima())) {
				int s;
				pila->sacar(s);
				res += s;
			}
			pila->meter(c);
		}
	}
	while (!pila->vacia()) {
		int s;
		pila->sacar(s);
		res += s;
	};
	return invertido(res);
}
//---------------------------------------------------------------------------
bool Notaciones :: parentesisOk(string cad){
 bool correcto = true;
	for (int i = 0; i < cad.length(); i++) {
		int s;
		char c = cad[i];
		if (c == '(')
			pila->meter(c);
		else if (c == ')') {
			if (pila->vacia()) {
				correcto = false;
				break;
			}
			pila->sacar(s);
		}
	}
	if (correcto && pila->vacia()) {
		ShowMessage("Parentesis corecto");
		return true;
   }	else  {
		ShowMessage("Parentesis incorrectos");
		return false;
   }
}
//---------------------------------------------------------------------------
