//---------------------------------------------------------------------------

#pragma hdrstop

#include "CNotaciones.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

Notaciones :: Notaciones(Pila_CSMemoria* pil){
pila=pil;
}

Notaciones :: Notaciones(){
pila=new Pila_CSMemoria();
}


/*double Pila_CSMemoria :: pos_Fija(AnsiString expPosFija){
AnsiString signo="+-/*^";
AnsiString cad="0123456789";
  for (int i=1 ; i <=expPosFija.Length();i++) {
		if (cad.Pos(expPosFija[i])) {
		   this->meter(StrToInt(expPosFija[i]));
		} else{
		int op1;
		int op2;
			sacar(op1);
			sacar(op2);
			if(signo.Pos(expPosFija[i])){
			  int z=evaluar(op1,expPosFija[i],op2);
			  this->meter(z);
			}

		}
  }
  int p;
  this->sacar(p);
  return p;
}
//---------------------------------------------------------------------------
double Pila_CSMemoria :: evaluar(int x1,char signo,int x2){
switch (signo) {
  case '^' :
	return pow(x1,x2);

  case '+' :
	return x1+x2;

  case '-' :
	return x1-x2;

  case '*' :
	return  x1*x2;

  case '/' :
   if(x2!=0)
	 return  x1/x2;
	  else throw "error";

	default:
	  break;
}
  throw"Error" ;
}
*/
//---------------------------------------------------------------------------
bool Pila_CSMemoria :: esOperador(char c) {
	string op = "+-%*/^";
	int pos = op.find_first_of(c);
	return pos >= 0;
}
//---------------------------------------------------------------------------
int Pila_CSMemoria :: prioridad(char operador) {
	switch (operador) {
	case '^':
		return 5;
	case '*':
	case '/':
		return 4;
	case '%':
		return 3;
	case '+':
	case '-':
		return 2;
	case '(':
	case ')':
		return 1;
	}
	return 0;
}
//---------------------------------------------------------------------------
string Pila_CSMemoria :: postfija(string exp) {
	string res = "";
	for (int i = 0; i < exp.length(); i++) {
		char c = exp[i];
		if (c == '(')
			meter(c);
		else if (c == ')') {
			int s;
			while (cima() != '(') {
				sacar(s);
				res += s;
			}
			sacar(s);
		}
		else if (!esOperador(c)) // si es letra
				res += c;
		else {
			while (!pila.vacia() && prioridad(c) < prioridad(pila.cima())) {
				int s;
				pila.sacar(s);
				res += s;
			}
			pila.meter(c);
		}
	}
	while (!pila.vacia()) {
		int s;
		pila.sacar(s);
		res += s;
	}
	return res;
}
//---------------------------------------------------------------------------
string Pila_CSMemoria :: invertido(string s) {
	string r = "";
	for (int i = 0; i < s.length(); i++)
		r = s[i] + r;
	return r;
}
//---------------------------------------------------------------------------
string Pila_CSMemoria :: prefija(string exp) {
	PilaPtr pila;
	string res = "";
	for (int i = exp.length() - 1; i >= 0; i--) {
		char c = exp[i];
		if (c == ')')
			pila.meter(c);
		else if (c == '(') {
			int s;
			while (pila.cima() != ')') {
				pila.sacar(s);
				res += s;
			}
			pila.sacar(s);
		}
		else if (!esOperador(c)) // es letra
				res += c;
		else {
			while (!pila.vacia() && prioridad(c) < prioridad(pila.cima())) {
				int s;
				pila.sacar(s);
				res += s;
			}
			pila.meter(c);
		}
	}
	while (!pila.vacia()) {
		int s;
		pila.sacar(s);
		res += s;
	};
	return invertido(res);
}
//---------------------------------------------------------------------------

